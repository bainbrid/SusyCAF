#include "SUSYBSMAnalysis/SusyCAF/interface/SusyCAF_HLTTrigger.h"
#include "FWCore/Framework/interface/Event.h"
#include "DataFormats/Common/interface/TriggerResults.h"
using namespace edm;
using namespace std;
typedef std::pair<const char *, const edm::InputTag *> MissingCollectionInfo;
template <class T>
static inline
bool getCollection(const edm::Event & event, std::vector<MissingCollectionInfo> & missing, edm::Handle<T> & handle, const edm::InputTag & name, const char * description)
{
  event.getByLabel(name, handle);
  bool valid = handle.isValid();
  if (not valid) {
    missing.push_back( std::make_pair(description, & name) );
    handle.clear();
  }
  return valid;
}

SusyCAF_HLTTrigger::SusyCAF_HLTTrigger(const edm::ParameterSet& iConfig):
hltresults_(iConfig.getParameter<edm::InputTag>("hltresults")),
inputTag(iConfig.getParameter<edm::InputTag>("InputTag")),
prefix(iConfig.getParameter<std::string>("Prefix")),
suffix(iConfig.getParameter<std::string>("Suffix"))
{ 
produces <int>(prefix+"EvtType7"+suffix);
produces <int>(prefix+"EvtType6"+suffix);
produces <int>(prefix+"EvtType5"+suffix);
produces <int>(prefix+"EvtType4"+suffix);
produces <int>(prefix+"EvType0"+suffix);
produces <int>(prefix+"L1Jet6U"+suffix);
produces <int>(prefix+"Jet15U"+suffix);
produces <int>(prefix+"Jet30U"+suffix);
produces <int>(prefix+"Jet50U"+suffix);
produces <int>(prefix+"FwdJet20U"+suffix);
produces <int>(prefix+"DiJetAve15U8E29"+suffix);
produces <int>(prefix+"DiJetAve30U8E29"+suffix);
produces <int>(prefix+"QuadJet15U"+suffix);
produces <int>(prefix+"L1MET20"+suffix);
produces <int>(prefix+"MET45"+suffix);
produces <int>(prefix+"MET100"+suffix); 
produces <int>(prefix+"HT100U"+suffix);
produces <int>(prefix+"L1MuOpen"+suffix);
produces <int>(prefix+"L1MuOpenPrescaled"+suffix);
produces <int>(prefix+"L1Mu"+suffix);
produces <int>(prefix+"L1Mu20"+suffix);
produces <int>(prefix+"L2Mu9"+suffix);
produces <int>(prefix+"L2Mu11"+suffix);
produces <int>(prefix+"IsoMu3"+suffix);
produces <int>(prefix+"Mu3"+suffix);
produces <int>(prefix+"Mu5"+suffix);
produces <int>(prefix+"Mu9"+suffix);
produces <int>(prefix+"L1DoubleMuOpen"+suffix);
produces <int>(prefix+"DoubleMu0"+suffix);
produces <int>(prefix+"DoubleMu3"+suffix);
produces <int>(prefix+"L1SingleEG5"+suffix);
produces <int>(prefix+"L1SingleEG8"+suffix);
produces <int>(prefix+"Ele10LWL1R"+suffix);
produces <int>(prefix+"Ele10LWEleIdL1R"+suffix);
produces <int>(prefix+"Ele15LWL1R"+suffix);
produces <int>(prefix+"Ele15SC10LWL1R"+suffix);
produces <int>(prefix+"Ele15SiStripL1R"+suffix);
produces <int>(prefix+"Ele20LWL1R"+suffix);
produces <int>(prefix+"L1DoubleEG5"+suffix);
produces <int>(prefix+"DoubleEle5SWL1R"+suffix);
produces <int>(prefix+"DoublePhoton5eeResL1R"+suffix);
produces <int>(prefix+"DoublePhoton5JpsiL1R"+suffix);
produces <int>(prefix+"DoublePhoton5UpsilonL1R"+suffix);
produces <int>(prefix+"Photon10L1R"+suffix);
produces <int>(prefix+"Photon15L1R"+suffix);
produces <int>(prefix+"Photon15TrackIsoL1R"+suffix);
produces <int>(prefix+"Photon15LooseEcalIsoL1R"+suffix);
produces <int>(prefix+"Photon20L1R"+suffix);
produces <int>(prefix+"Photon30L1R_8E29"+suffix);
produces <int>(prefix+"DoublePhoton10L1R"+suffix);
produces <int>(prefix+"SingleLooseIsoTau20"+suffix);
produces <int>(prefix+"DoubleLooseIsoTau15"+suffix);
produces <int>(prefix+"BTagIPJet50U"+suffix);
produces <int>(prefix+"BTagMuJet10U"+suffix);
produces <int>(prefix+"StoppedHSCP8E29"+suffix);
produces <int>(prefix+"L1Mu14L1SingleEG10"+suffix);
produces <int>(prefix+"L1Mu14L1SingleJet6U"+suffix);
produces <int>(prefix+"L1Mu14L1ETM30"+suffix);
produces <int>(prefix+"ZeroBias"+suffix);
produces <int>(prefix+"ZeroBiasPrescaled"+suffix);
produces <int>(prefix+"MinBias"+suffix);
produces <int>(prefix+"MinBiasHcal"+suffix);
produces <int>(prefix+"MinBiasEcal"+suffix);
produces <int>(prefix+"MinBiasPixel"+suffix);
produces <int>(prefix+"MinBiasPixel_Trk5"+suffix);
produces <int>(prefix+"CSCBeamHalo"+suffix);
produces <int>(prefix+"CSCBeamHaloOverlapRing1"+suffix);
produces <int>(prefix+"CSCBeamHaloOverlapRing2"+suffix);
produces <int>(prefix+"CSCBeamHaloRing2or3"+suffix);
produces <int>(prefix+"BackwardBSC"+suffix);
produces <int>(prefix+"ForwardBSC"+suffix);
produces <int>(prefix+"TrackerCosmics"+suffix);
produces <int>(prefix+"IsoTrack_8E29"+suffix);
produces <int>(prefix+"Calibration"+suffix);
produces <int>(prefix+"EcalCalibration"+suffix);
produces <int>(prefix+"HcalCalibration"+suffix);
produces <int>(prefix+"Random"+suffix);
produces <int>(prefix+"Physics"+suffix);
produces <int>(prefix+"PhysicsNoMuon"+suffix);
produces <int>(prefix+"PhysicsNoMuonPrescaled"+suffix);
produces <int>(prefix+"PixelFEDSize"+suffix);
produces <int>(prefix+"HFThreshold"+suffix);
produces <int>(prefix+"GlobalRunHPDNoise"+suffix);
produces <int>(prefix+"TechTrigHCALNoise"+suffix);
produces <int>(prefix+"L1BPTX"+suffix);
produces <int>(prefix+"L1BSC"+suffix);
produces <int>(prefix+"L1HFtech"+suffix);
produces <int>(prefix+"L2Mu3NoVertex"+suffix);
produces <int>(prefix+"OIstateTkMu3"+suffix);
produces <int>(prefix+"EgammaSuperClusterOnlyL1R"+suffix);
produces <int>(prefix+"TrackPointing"+suffix);

}

void SusyCAF_HLTTrigger::produce(edm::Event& iEvent, const edm::EventSetup& iSetup) {
 
std::auto_ptr< int> hlt_EvtType7                			  (new  int());
std::auto_ptr< int> hlt_EvtType6	        			  (new  int());
std::auto_ptr< int> hlt_EvtType5	        			  (new  int());
std::auto_ptr< int> hlt_EvtType4                			  (new  int());
std::auto_ptr< int> hlt_EvType0		        			  (new  int());
std::auto_ptr< int> hlt_L1Jet6U 	        			  (new  int());
std::auto_ptr< int> hlt_Jet15U		        			  (new  int());
std::auto_ptr< int> hlt_Jet30U		        			  (new  int());
std::auto_ptr< int> hlt_Jet50U                  			  (new  int());
std::auto_ptr< int> hlt_FwdJet20U	        			  (new  int());
std::auto_ptr< int> hlt_DiJetAve15U_8E29        			  (new  int());
std::auto_ptr< int> hlt_DiJetAve30U_8E29        			  (new  int());
std::auto_ptr< int> hlt_QuadJet15U	        			  (new  int()); 
std::auto_ptr< int> hlt_L1MET20 	        			  (new  int());
std::auto_ptr< int> hlt_MET45		        			  (new  int());
std::auto_ptr< int> hlt_MET100		        			  (new  int());
std::auto_ptr< int> hlt_HT100U		        			  (new  int());
std::auto_ptr< int> hlt_L1MuOpen	        			  (new  int());
std::auto_ptr< int> hlt_L1MuOpenPrescaled       			  (new  int());
std::auto_ptr< int> hlt_L1Mu		        			  (new  int());
std::auto_ptr< int> hlt_L1Mu20		        			  (new  int());
std::auto_ptr< int> hlt_L2Mu9		        			  (new  int());
std::auto_ptr< int> hlt_L2Mu11		        			  (new  int());
std::auto_ptr< int> hlt_IsoMu3		        			  (new  int());
std::auto_ptr< int> hlt_Mu3						  (new  int());
std::auto_ptr< int> hlt_Mu5						  (new  int());
std::auto_ptr< int> hlt_Mu9						  (new  int());
std::auto_ptr< int> hlt_L1DoubleMuOpen					  (new  int());
std::auto_ptr< int> hlt_DoubleMu0					  (new  int());
std::auto_ptr< int> hlt_DoubleMu3					  (new  int());
std::auto_ptr< int> hlt_L1SingleEG5					  (new  int());
std::auto_ptr< int> hlt_L1SingleEG8					  (new  int());
std::auto_ptr< int> hlt_Ele10_LW_L1R					  (new  int());
std::auto_ptr< int> hlt_Ele10_LW_EleId_L1R				  (new  int());
std::auto_ptr< int> hlt_Ele15_LW_L1R					  (new  int());
std::auto_ptr< int> hlt_Ele15_SC10_LW_L1R				  (new  int());
std::auto_ptr< int> hlt_Ele15_SiStrip_L1R				  (new  int());
std::auto_ptr< int> hlt_Ele20_LW_L1R					  (new  int());
std::auto_ptr< int> hlt_L1DoubleEG5					  (new  int());
std::auto_ptr< int> hlt_DoubleEle5_SW_L1R				  (new  int());
std::auto_ptr< int> hlt_DoublePhoton5_eeRes_L1R 			  (new  int());
std::auto_ptr< int> hlt_DoublePhoton5_Jpsi_L1R				  (new  int());
std::auto_ptr< int> hlt_DoublePhoton5_Upsilon_L1R			  (new  int());
std::auto_ptr< int> hlt_Photon10_L1R					  (new  int());
std::auto_ptr< int> hlt_Photon15_L1R					  (new  int());
std::auto_ptr< int> hlt_Photon15_TrackIso_L1R				  (new  int());
std::auto_ptr< int> hlt_Photon15_LooseEcalIso_L1R			  (new  int());
std::auto_ptr< int> hlt_Photon20_L1R					  (new  int());
std::auto_ptr< int> hlt_Photon30_L1R_8E29		                  (new  int());   
std::auto_ptr< int> hlt_DoublePhoton10_L1R				  (new  int());
std::auto_ptr< int> hlt_SingleLooseIsoTau20				  (new  int());
std::auto_ptr< int> hlt_DoubleLooseIsoTau15				  (new  int());
std::auto_ptr< int> hlt_BTagIP_Jet50U					  (new  int());
std::auto_ptr< int> hlt_BTagMu_Jet10U					  (new  int());
std::auto_ptr< int> hlt_StoppedHSCP_8E29				  (new  int());
std::auto_ptr< int> hlt_L1Mu14_L1SingleEG10				  (new  int());
std::auto_ptr< int> hlt_L1Mu14_L1SingleJet6U				  (new  int());
std::auto_ptr< int> hlt_L1Mu14_L1ETM30					  (new  int());
std::auto_ptr< int> hlt_ZeroBias					  (new  int());
std::auto_ptr< int> hlt_ZeroBiasPrescaled				  (new  int());
std::auto_ptr< int> hlt_MinBias 					  (new  int());
std::auto_ptr< int> hlt_MinBiasHcal					  (new  int());
std::auto_ptr< int> hlt_MinBiasEcal					  (new  int());
std::auto_ptr< int> hlt_MinBiasPixel					  (new  int());
std::auto_ptr< int> hlt_MinBiasPixel_Trk5				  (new  int());
std::auto_ptr< int> hlt_CSCBeamHalo					  (new  int());
std::auto_ptr< int> hlt_CSCBeamHaloOverlapRing1 			  (new  int());
std::auto_ptr< int> hlt_CSCBeamHaloOverlapRing2 			  (new  int());
std::auto_ptr< int> hlt_CSCBeamHaloRing2or3				  (new  int());
std::auto_ptr< int> hlt_BackwardBSC					  (new  int());
std::auto_ptr< int> hlt_ForwardBSC					  (new  int());
std::auto_ptr< int> hlt_TrackerCosmics					  (new  int());
std::auto_ptr< int> hlt_IsoTrack_8E29					  (new  int());
std::auto_ptr< int> hlt_Calibration					  (new  int());
std::auto_ptr< int> hlt_EcalCalibration 				  (new  int());
std::auto_ptr< int> hlt_HcalCalibration 				  (new  int());
std::auto_ptr< int> hlt_Random						  (new  int());
std::auto_ptr< int> hlt_Physics 					  (new  int());
std::auto_ptr< int> hlt_PhysicsNoMuon					  (new  int());
std::auto_ptr< int> hlt_PhysicsNoMuonPrescaled				  (new  int());
std::auto_ptr< int> hlt_PixelFEDSize					  (new  int());
std::auto_ptr< int> hlt_HFThreshold					  (new  int());
std::auto_ptr< int> hlt_GlobalRunHPDNoise				  (new  int());
std::auto_ptr< int> hlt_TechTrigHCALNoise				  (new  int());
std::auto_ptr< int> hlt_L1_BPTX 					  (new  int());
std::auto_ptr< int> hlt_L1_BSC						  (new  int());
std::auto_ptr< int> hlt_L1_HFtech					  (new  int());
std::auto_ptr< int> hlt_L2Mu3_NoVertex					  (new  int());
std::auto_ptr< int> hlt_OIstateTkMu3					  (new  int());
std::auto_ptr< int> hlt_EgammaSuperClusterOnly_L1R			  (new  int());
std::auto_ptr< int> hlt_TrackPointing					  (new  int());
										


    std::vector<MissingCollectionInfo> missing;    
 
   // HLT TRIGGERS  
    bool triggerExists = true;
  
    
    edm::Handle<edm::TriggerResults> hltresults;
    getCollection( iEvent, missing, hltresults,      hltresults_,        "HLT Results" );
    triggerNames_.init(*hltresults);  
    hlNames_ = triggerNames_.triggerNames();
				
   *hlt_EvtType7.get()           	 =  -1; 		     
   *hlt_EvtType6.get()           	 =  -1; 		     
   *hlt_EvtType5.get()  	 	 =  -1; 			
   *hlt_EvtType4.get()  	 	 =  -1; 			
   *hlt_EvType0.get()		 	 =  -1; 			
   *hlt_L1Jet6U.get()		 	 =  -1; 			
   *hlt_Jet15U.get()		 	 =  -1; 			
   *hlt_Jet30U.get()		 	 =  -1; 			
   *hlt_Jet50U.get()		 	 =  -1; 			
   *hlt_FwdJet20U.get() 	 	 =  -1; 			     
   *hlt_DiJetAve15U_8E29.get()   	 =  -1; 		 
   *hlt_DiJetAve30U_8E29.get()   	 =  -1; 		 
   *hlt_QuadJet15U.get()	 	 =  -1; 			      
   *hlt_L1MET20.get()		 	 =  -1; 			 
   *hlt_MET45.get()		 	 =  -1; 				 
   *hlt_MET100.get()		 	 =  -1; 			 
   *hlt_HT100U.get()		 	 =  -1; 			 
   *hlt_L1MuOpen.get()  	 	 =  -1; 			
   *hlt_L1MuOpenPrescaled.get()  	 =  -1; 		     
   *hlt_L1Mu.get()		 	 =  -1; 				
   *hlt_L1Mu20.get()		 	 =  -1; 			
   *hlt_L2Mu9.get()		 	 =  -1; 				
   *hlt_L2Mu11.get()			 =  -1;			       
   *hlt_IsoMu3.get()			 =  -1;			       
   *hlt_Mu3.get()			 =  -1;			       
   *hlt_Mu5.get()			 =  -1;			       
   *hlt_Mu9.get()			 =  -1;			       
   *hlt_L1DoubleMuOpen.get()		 =  -1;		       
   *hlt_DoubleMu0.get()			 =  -1;  			    
   *hlt_DoubleMu3.get()			 =  -1;  			    
   *hlt_L1SingleEG5.get()		 =  -1;		       
   *hlt_L1SingleEG8.get()		 =  -1;		       
   *hlt_Ele10_LW_L1R.get()		 =  -1;		       
   *hlt_Ele10_LW_EleId_L1R.get()	 =  -1; 		    
   *hlt_Ele15_LW_L1R.get()		 =  -1;		       
   *hlt_Ele15_SC10_LW_L1R.get()		 =  -1;  		    
   *hlt_Ele15_SiStrip_L1R.get()		 =  -1;  		    
   *hlt_Ele20_LW_L1R.get()		 =  -1;		       
   *hlt_L1DoubleEG5.get()		 =  -1;		       
   *hlt_DoubleEle5_SW_L1R.get()		 =  -1;  		    
   *hlt_DoublePhoton5_eeRes_L1R.get()	 =  -1;	       
   *hlt_DoublePhoton5_Jpsi_L1R.get()	 =  -1;	       
   *hlt_DoublePhoton5_Upsilon_L1R.get()  =  -1;  	    
   *hlt_Photon10_L1R.get()		 =  -1;		       
   *hlt_Photon15_L1R .get()		 =  -1;		       
   *hlt_Photon15_TrackIso_L1R.get()	 =  -1;	       
   *hlt_Photon15_LooseEcalIso_L1R.get()	 =  -1;  	    
   *hlt_Photon20_L1R.get()		 =  -1;		       
   *hlt_Photon30_L1R_8E29.get()		 =  -1;  		    
   *hlt_DoublePhoton10_L1R.get()	 =  -1; 		    
   *hlt_SingleLooseIsoTau20.get()	 =  -1;	       
   *hlt_DoubleLooseIsoTau15.get()	 =  -1;	       
   *hlt_BTagIP_Jet50U.get()		 =  -1;		       
   *hlt_BTagMu_Jet10U.get()		 =  -1;		       
   *hlt_StoppedHSCP_8E29.get()		 =  -1;		       
   *hlt_L1Mu14_L1SingleEG10.get()	 =  -1;	       
   *hlt_L1Mu14_L1SingleJet6U .get()	 =  -1;	       
   *hlt_L1Mu14_L1ETM30.get()		 =  -1;		       
   *hlt_ZeroBias.get()			 =  -1;			       
   *hlt_ZeroBiasPrescaled.get()		 =  -1;  		    
   *hlt_MinBias.get()			 =  -1;			       
   *hlt_MinBiasHcal.get()		 =  -1;		       
   *hlt_MinBiasEcal.get()		 =  -1;		       
   *hlt_MinBiasPixel.get()		 =  -1;		       
   *hlt_MinBiasPixel_Trk5.get()		 =  -1;  		    
   *hlt_CSCBeamHalo.get()		 =  -1;		       
   *hlt_CSCBeamHaloOverlapRing1.get()	 =  -1;	       
   *hlt_CSCBeamHaloOverlapRing2.get()	 =  -1;	       
   *hlt_CSCBeamHaloRing2or3.get() 	 =  -1;	       
   *hlt_BackwardBSC.get() 		 =  -1;		       
   *hlt_ForwardBSC.get()		 =  -1; 		       
   *hlt_TrackerCosmics.get()		 =  -1;		       
   *hlt_IsoTrack_8E29.get()		 =  -1;		       
   *hlt_Calibration.get() 		 =  -1;		       
   *hlt_EcalCalibration.get() 		 =  -1;		       
   *hlt_HcalCalibration.get() 		 =  -1;		       
   *hlt_Random.get() 			 =  -1;			       
   *hlt_Physics.get() 			 =  -1;			       
   *hlt_PhysicsNoMuon.get() 		 =  -1;		       
   *hlt_PhysicsNoMuonPrescaled.get() 	 =  -1;	       
   *hlt_PixelFEDSize.get() 		 =  -1;		       
   *hlt_HFThreshold.get() 		 =  -1;		       
   *hlt_GlobalRunHPDNoise.get() 	 =  -1;  		    
   *hlt_TechTrigHCALNoise.get() 	 =  -1;			 
   *hlt_L1_BPTX.get() 			 =  -1; 			    
   *hlt_L1_BSC.get() 			 =  -1;  			    
   *hlt_L1_HFtech.get() 		 =  -1;				 
   *hlt_L2Mu3_NoVertex.get() 		 =  -1;  		    
   *hlt_OIstateTkMu3.get() 	         =  -1;			    
   *hlt_EgammaSuperClusterOnly_L1R.get() =  -1;		 
   *hlt_TrackPointing.get() 	         =  -1;			

    if (!hltresults.isValid()) {
     triggerExists = false;             
     return;      
    }
    else {  
    for(unsigned int i=0; i< hltresults->size(); i++) {
          
     if(hlNames_[i] == "HLT_EvtType7")             	    *hlt_EvtType7.get() = (*hltresults)[i].accept();				 
     if(hlNames_[i] == "HLT_EvtType6")  		    *hlt_EvtType6.get() = (*hltresults)[i].accept();				 
     if(hlNames_[i] == "HLT_EvtType5")  		    *hlt_EvtType5.get() = (*hltresults)[i].accept();				 
     if(hlNames_[i] == "HLT_EvtType4")  		    *hlt_EvtType4.get() = (*hltresults)[i].accept();				 
     if(hlNames_[i] == "HLT_EvType0")			    *hlt_EvType0.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1Jet6U")			    *hlt_L1Jet6U.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Jet15U")			    *hlt_Jet15U.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Jet30U")			    *hlt_Jet30U.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Jet50U")			    *hlt_Jet50U.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_FwdJet20U") 		    *hlt_FwdJet20U.get() = (*hltresults)[i].accept();					
     if(hlNames_[i] == "HLT_DiJetAve15U_8E29")  	    *hlt_DiJetAve15U_8E29.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_DiJetAve30U_8E29")  	    *hlt_DiJetAve30U_8E29.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_QuadJet15U")		    *hlt_QuadJet15U.get() = (*hltresults)[i].accept();  				
     if(hlNames_[i] == "HLT_L1MET20")			    *hlt_L1MET20.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_MET45")			    *hlt_MET45.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_MET100")			    *hlt_MET100.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_HT100U")			    *hlt_HT100U.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1MuOpen")  		    *hlt_L1MuOpen.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1MuOpenPrescaled") 	    *hlt_L1MuOpenPrescaled.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1Mu")			    *hlt_L1Mu.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1Mu20")			    *hlt_L1Mu20.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L2Mu9")			    *hlt_L2Mu9.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L2Mu11")			    *hlt_L2Mu11.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_IsoMu3")			    *hlt_IsoMu3.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Mu3")			    *hlt_Mu3.get() = (*hltresults)[i].accept(); 				
     if(hlNames_[i] == "HLT_Mu5")			    *hlt_Mu5.get() = (*hltresults)[i].accept(); 				
     if(hlNames_[i] == "HLT_Mu9")			    *hlt_Mu9.get() = (*hltresults)[i].accept(); 				
     if(hlNames_[i] == "HLT_L1DoubleMuOpen")		    *hlt_L1DoubleMuOpen.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_DoubleMu0") 		    *hlt_DoubleMu0.get() = (*hltresults)[i].accept();					
     if(hlNames_[i] == "HLT_DoubleMu3") 		    *hlt_DoubleMu3.get() = (*hltresults)[i].accept();					
     if(hlNames_[i] == "HLT_L1SingleEG5")		    *hlt_L1SingleEG5.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_L1SingleEG8")		    *hlt_L1SingleEG8.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_Ele10_LW_L1R")		    *hlt_Ele10_LW_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Ele10_LW_EleId_L1R")	    *hlt_Ele10_LW_EleId_L1R.get() = (*hltresults)[i].accept();  			
     if(hlNames_[i] == "HLT_Ele15_LW_L1R")		    *hlt_Ele15_LW_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Ele15_SC10_LW_L1R") 	    *hlt_Ele15_SC10_LW_L1R.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Ele15_SiStrip_L1R") 	    *hlt_Ele15_SiStrip_L1R.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Ele20_LW_L1R")		    *hlt_Ele20_LW_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_L1DoubleEG5")		    *hlt_L1DoubleEG5.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_DoubleEle5_SW_L1R") 	    *hlt_DoubleEle5_SW_L1R.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_DoublePhoton5_eeRes_L1R")	    *hlt_DoublePhoton5_eeRes_L1R.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_DoublePhoton5_Jpsi_L1R")	    *hlt_DoublePhoton5_Jpsi_L1R.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_DoublePhoton5_Upsilon_L1R")     *hlt_DoublePhoton5_Upsilon_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Photon10_L1R")		    *hlt_Photon10_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Photon15_L1R")		    *hlt_Photon15_L1R .get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Photon15_TrackIso_L1R")	    *hlt_Photon15_TrackIso_L1R.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_Photon15_LooseEcalIso_L1R")     *hlt_Photon15_LooseEcalIso_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Photon20_L1R")		    *hlt_Photon20_L1R.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Photon30_L1R_8E29") 	    *hlt_Photon30_L1R_8E29.get() = (*hltresults)[i].accept();				   
     if(hlNames_[i] == "HLT_DoublePhoton10_L1R")	    *hlt_DoublePhoton10_L1R.get() = (*hltresults)[i].accept();  			
     if(hlNames_[i] == "HLT_SingleLooseIsoTau20")	    *hlt_SingleLooseIsoTau20.get() = (*hltresults)[i].accept(); 		
     if(hlNames_[i] == "HLT_DoubleLooseIsoTau15")	    *hlt_DoubleLooseIsoTau15.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_BTagIP_Jet50U")		    *hlt_BTagIP_Jet50U.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_BTagMu_Jet10U")		    *hlt_BTagMu_Jet10U.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_StoppedHSCP_8E29")  	    *hlt_StoppedHSCP_8E29.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_L1Mu14_L1SingleEG10")	    *hlt_L1Mu14_L1SingleEG10.get() = (*hltresults)[i].accept(); 		
     if(hlNames_[i] == "HLT_L1Mu14_L1SingleJet6U")	    *hlt_L1Mu14_L1SingleJet6U .get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_L1Mu14_L1ETM30")		    *hlt_L1Mu14_L1ETM30.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_ZeroBias")  		    *hlt_ZeroBias.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_ZeroBiasPrescaled") 	    *hlt_ZeroBiasPrescaled.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_MinBias")			    *hlt_MinBias.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_MinBiasHcal")		    *hlt_MinBiasHcal.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_MinBiasEcal")		    *hlt_MinBiasEcal.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_MinBiasPixel")		    *hlt_MinBiasPixel.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_MinBiasPixel_Trk5") 	    *hlt_MinBiasPixel_Trk5.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_CSCBeamHalo")		    *hlt_CSCBeamHalo.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_CSCBeamHaloOverlapRing1")	    *hlt_CSCBeamHaloOverlapRing1.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_CSCBeamHaloOverlapRing2")	    *hlt_CSCBeamHaloOverlapRing2.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_CSCBeamHaloRing2or3")	    *hlt_CSCBeamHaloRing2or3.get() = (*hltresults)[i].accept(); 		
     if(hlNames_[i] == "HLT_BackwardBSC")		    *hlt_BackwardBSC.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_ForwardBSC")		    *hlt_ForwardBSC.get() = (*hltresults)[i].accept();  			
     if(hlNames_[i] == "HLT_TrackerCosmics")		    *hlt_TrackerCosmics.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_IsoTrack_8E29")		    *hlt_IsoTrack_8E29.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Calibration")		    *hlt_Calibration.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_EcalCalibration")		    *hlt_EcalCalibration.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_HcalCalibration")		    *hlt_HcalCalibration.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_Random")			    *hlt_Random.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_Physics")			    *hlt_Physics.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_PhysicsNoMuon")		    *hlt_PhysicsNoMuon.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_PhysicsNoMuonPrescaled")	    *hlt_PhysicsNoMuonPrescaled.get() = (*hltresults)[i].accept();		
     if(hlNames_[i] == "HLT_PixelFEDSize")		    *hlt_PixelFEDSize.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_HFThreshold")		    *hlt_HFThreshold.get() = (*hltresults)[i].accept(); 			
     if(hlNames_[i] == "HLT_GlobalRunHPDNoise") 	    *hlt_GlobalRunHPDNoise.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_TechTrigHCALNoise") 	    *hlt_TechTrigHCALNoise.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1_BPTX")			    *hlt_L1_BPTX.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1_BSC")			    *hlt_L1_BSC.get() = (*hltresults)[i].accept();				
     if(hlNames_[i] == "HLT_L1_HFtech") 		    *hlt_L1_HFtech.get() = (*hltresults)[i].accept();					
     if(hlNames_[i] == "HLT_L2Mu3_NoVertex")		    *hlt_L2Mu3_NoVertex.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_OIstateTkMu3")		    *hlt_OIstateTkMu3.get() = (*hltresults)[i].accept();			
     if(hlNames_[i] == "HLT_EgammaSuperClusterOnly_L1R")    *hlt_EgammaSuperClusterOnly_L1R.get() = (*hltresults)[i].accept();		   
     if(hlNames_[i] == "HLT_TrackPointing")  	            *hlt_TrackPointing.get() = (*hltresults)[i].accept();		          
     }
    }
     
    
 	iEvent.put(hlt_EvtType7                    ,prefix+"EvtType7"+suffix);
	iEvent.put(hlt_EvtType6 		   ,prefix+"EvtType6"+suffix);
	iEvent.put(hlt_EvtType5 		   ,prefix+"EvtType5"+suffix);
	iEvent.put(hlt_EvtType4 		   ,prefix+"EvtType4"+suffix);
	iEvent.put(hlt_EvType0			   ,prefix+"EvType0"+suffix);
	iEvent.put(hlt_L1Jet6U			   ,prefix+"L1Jet6U"+suffix);
	iEvent.put(hlt_Jet15U			   ,prefix+"Jet15U"+suffix);
	iEvent.put(hlt_Jet30U			   ,prefix+"Jet30U"+suffix);
	iEvent.put(hlt_Jet50U			   ,prefix+"Jet50U"+suffix);
	iEvent.put(hlt_FwdJet20U		   ,prefix+"FwdJet20U"+suffix);
	iEvent.put(hlt_DiJetAve15U_8E29 	   ,prefix+"DiJetAve15U8E29"+suffix);
	iEvent.put(hlt_DiJetAve30U_8E29 	   ,prefix+"DiJetAve30U8E29"+suffix);
	iEvent.put(hlt_QuadJet15U		   ,prefix+"QuadJet15U"+suffix);
	iEvent.put(hlt_L1MET20			   ,prefix+"L1MET20"+suffix);
	iEvent.put(hlt_MET45			   ,prefix+"MET45"+suffix);
	iEvent.put(hlt_MET100			   ,prefix+"MET100"+suffix); 
	iEvent.put(hlt_HT100U			   ,prefix+"HT100U"+suffix);
	iEvent.put(hlt_L1MuOpen 		   ,prefix+"L1MuOpen"+suffix);
	iEvent.put(hlt_L1MuOpenPrescaled	   ,prefix+"L1MuOpenPrescaled"+suffix);
	iEvent.put(hlt_L1Mu			   ,prefix+"L1Mu"+suffix);
	iEvent.put(hlt_L1Mu20			   ,prefix+"L1Mu20"+suffix);
	iEvent.put(hlt_L2Mu9			   ,prefix+"L2Mu9"+suffix);
	iEvent.put(hlt_L2Mu11			   ,prefix+"L2Mu11"+suffix);
	iEvent.put(hlt_IsoMu3			   ,prefix+"IsoMu3"+suffix);
	iEvent.put(hlt_Mu3			   ,prefix+"Mu3"+suffix);
	iEvent.put(hlt_Mu5			   ,prefix+"Mu5"+suffix);
	iEvent.put(hlt_Mu9			   ,prefix+"Mu9"+suffix);
	iEvent.put(hlt_L1DoubleMuOpen		   ,prefix+"L1DoubleMuOpen"+suffix);
	iEvent.put(hlt_DoubleMu0		   ,prefix+"DoubleMu0"+suffix);
	iEvent.put(hlt_DoubleMu3		   ,prefix+"DoubleMu3"+suffix);
	iEvent.put(hlt_L1SingleEG5		   ,prefix+"L1SingleEG5"+suffix);
	iEvent.put(hlt_L1SingleEG8		   ,prefix+"L1SingleEG8"+suffix);
	iEvent.put(hlt_Ele10_LW_L1R		   ,prefix+"Ele10LWL1R"+suffix);
 	iEvent.put(hlt_Ele10_LW_EleId_L1R	   ,prefix+"Ele10LWEleIdL1R"+suffix);
	iEvent.put(hlt_Ele15_LW_L1R		   ,prefix+"Ele15LWL1R"+suffix);
	iEvent.put(hlt_Ele15_SC10_LW_L1R	   ,prefix+"Ele15SC10LWL1R"+suffix);
	iEvent.put(hlt_Ele15_SiStrip_L1R	   ,prefix+"Ele15SiStripL1R"+suffix);
	iEvent.put(hlt_Ele20_LW_L1R		   ,prefix+"Ele20LWL1R"+suffix);
	iEvent.put(hlt_L1DoubleEG5		   ,prefix+"L1DoubleEG5"+suffix);
	iEvent.put(hlt_DoubleEle5_SW_L1R	   ,prefix+"DoubleEle5SWL1R"+suffix);
	iEvent.put(hlt_DoublePhoton5_eeRes_L1R	   ,prefix+"DoublePhoton5eeResL1R"+suffix);
	iEvent.put(hlt_DoublePhoton5_Jpsi_L1R	   ,prefix+"DoublePhoton5JpsiL1R"+suffix);
	iEvent.put(hlt_DoublePhoton5_Upsilon_L1R   ,prefix+"DoublePhoton5UpsilonL1R"+suffix);
	iEvent.put(hlt_Photon10_L1R		   ,prefix+"Photon10L1R"+suffix);
	iEvent.put(hlt_Photon15_L1R		   ,prefix+"Photon15L1R"+suffix);
	iEvent.put(hlt_Photon15_TrackIso_L1R	   ,prefix+"Photon15TrackIsoL1R"+suffix);
	iEvent.put(hlt_Photon15_LooseEcalIso_L1R   ,prefix+"Photon15LooseEcalIsoL1R"+suffix);
	iEvent.put(hlt_Photon20_L1R		   ,prefix+"Photon20L1R"+suffix);
	iEvent.put(hlt_Photon30_L1R_8E29	   ,prefix+"Photon30L1R_8E29"+suffix);
	iEvent.put(hlt_DoublePhoton10_L1R	   ,prefix+"DoublePhoton10L1R"+suffix);
	iEvent.put(hlt_SingleLooseIsoTau20	   ,prefix+"SingleLooseIsoTau20"+suffix);
	iEvent.put(hlt_DoubleLooseIsoTau15	   ,prefix+"DoubleLooseIsoTau15"+suffix);
	iEvent.put(hlt_BTagIP_Jet50U		   ,prefix+"BTagIPJet50U"+suffix);
	iEvent.put(hlt_BTagMu_Jet10U		   ,prefix+"BTagMuJet10U"+suffix);
	iEvent.put(hlt_StoppedHSCP_8E29 	   ,prefix+"StoppedHSCP8E29"+suffix);
	iEvent.put(hlt_L1Mu14_L1SingleEG10	   ,prefix+"L1Mu14L1SingleEG10"+suffix);
	iEvent.put(hlt_L1Mu14_L1SingleJet6U	   ,prefix+"L1Mu14L1SingleJet6U"+suffix);
	iEvent.put(hlt_L1Mu14_L1ETM30		   ,prefix+"L1Mu14L1ETM30"+suffix);
	iEvent.put(hlt_ZeroBias 		   ,prefix+"ZeroBias"+suffix);
	iEvent.put(hlt_ZeroBiasPrescaled	   ,prefix+"ZeroBiasPrescaled"+suffix);
	iEvent.put(hlt_MinBias			   ,prefix+"MinBias"+suffix);
	iEvent.put(hlt_MinBiasHcal		   ,prefix+"MinBiasHcal"+suffix);
	iEvent.put(hlt_MinBiasEcal		   ,prefix+"MinBiasEcal"+suffix);
	iEvent.put(hlt_MinBiasPixel		   ,prefix+"MinBiasPixel"+suffix);
	iEvent.put(hlt_MinBiasPixel_Trk5	   ,prefix+"MinBiasPixel_Trk5"+suffix);
 	iEvent.put(hlt_CSCBeamHalo		   ,prefix+"CSCBeamHalo"+suffix);
	iEvent.put(hlt_CSCBeamHaloOverlapRing1	   ,prefix+"CSCBeamHaloOverlapRing1"+suffix);
	iEvent.put(hlt_CSCBeamHaloOverlapRing2	   ,prefix+"CSCBeamHaloOverlapRing2"+suffix);
	iEvent.put(hlt_CSCBeamHaloRing2or3	   ,prefix+"CSCBeamHaloRing2or3"+suffix);
	iEvent.put(hlt_BackwardBSC		   ,prefix+"BackwardBSC"+suffix);
	iEvent.put(hlt_ForwardBSC		   ,prefix+"ForwardBSC"+suffix);
	iEvent.put(hlt_TrackerCosmics		   ,prefix+"TrackerCosmics"+suffix);
	iEvent.put(hlt_IsoTrack_8E29		   ,prefix+"IsoTrack_8E29"+suffix);
	iEvent.put(hlt_Calibration		   ,prefix+"Calibration"+suffix);
	iEvent.put(hlt_EcalCalibration		   ,prefix+"EcalCalibration"+suffix);
	iEvent.put(hlt_HcalCalibration		   ,prefix+"HcalCalibration"+suffix);
	iEvent.put(hlt_Random			   ,prefix+"Random"+suffix);
	iEvent.put(hlt_Physics			   ,prefix+"Physics"+suffix);
	iEvent.put(hlt_PhysicsNoMuon		   ,prefix+"PhysicsNoMuon"+suffix);
	iEvent.put(hlt_PhysicsNoMuonPrescaled	   ,prefix+"PhysicsNoMuonPrescaled"+suffix);
	iEvent.put(hlt_PixelFEDSize		   ,prefix+"PixelFEDSize"+suffix);
	iEvent.put(hlt_HFThreshold		   ,prefix+"HFThreshold"+suffix);
	iEvent.put(hlt_GlobalRunHPDNoise	   ,prefix+"GlobalRunHPDNoise"+suffix);
	iEvent.put(hlt_TechTrigHCALNoise	   ,prefix+"TechTrigHCALNoise"+suffix);
	iEvent.put(hlt_L1_BPTX			   ,prefix+"L1BPTX"+suffix);
	iEvent.put(hlt_L1_BSC			   ,prefix+"L1BSC"+suffix);
	iEvent.put(hlt_L1_HFtech		   ,prefix+"L1HFtech"+suffix);
	iEvent.put(hlt_L2Mu3_NoVertex		   ,prefix+"L2Mu3NoVertex"+suffix);
	iEvent.put(hlt_OIstateTkMu3		   ,prefix+"OIstateTkMu3"+suffix);
	iEvent.put(hlt_EgammaSuperClusterOnly_L1R  ,prefix+"EgammaSuperClusterOnlyL1R"+suffix);
	iEvent.put(hlt_TrackPointing		   ,prefix+"TrackPointing"+suffix);
	
}
	
	
	
